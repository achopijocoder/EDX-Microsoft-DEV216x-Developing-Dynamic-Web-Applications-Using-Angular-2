Module 4: TypeScript Features in Angular 2 > Compiler > TypeScript

TypeScript

Many of the examples and exercises you have seen thus far have heavily relied on the TypeScript language. While it is possible to write an Angular application in pure JavaScript, many of the demos, examples and documentation you will see online show you how to quickly and easily build Angular applications using TypeScript. Since there is a one-to-one relationship between TypeScript classes and features of Angular (like Components), you will find it convenient to use TypeScript to build your Angular applications.
TypeScript Compiler

In most cases, you install TypeScript using Node's Package Manager:

npm install typescript --global

When TypeScript is installed, the TypeScript compiler (tsc) will also be installed to your local system and is available using a command-line interface. To compile a TypeScript file you have written, you simply need to invoke the tsc compiler using a command link this:

tsc example.ts

The output from the tsc command is a javascript file with a similar name (example.js).

You can also tell the complier to compile multiple files. For example, you may want to compile multiple TypeScript files:

tsc example.ts sample.ts




Module 4: TypeScript Features in Angular 2 > Compiler > Hands-On: Configuring a tsconfig.json File

Hands-On: Configuring a tsconfig.json File

Objective: In this brief guided exercise, you will modify various configuration settings for the tsconfig.json file.

Pre-requisite: You need to have Visual Studio Code installed on your local machine (Windows, OSX or Linux) and Node Package Manager in order to complete this exercise.
Setup

    On your local machine, open Visual Studio Code.
    Go to the File menu and select the Open Folder option.
    Create a new folder for this exercise and select this folder in the dialog.

Bootstrapping Your Environment

    In Visual Studio Code, right click the Explorer and select the Open in Command Prompt option.

    Run the Angular generator using yeoman:

    yo edx-angular

    Close your command prompt.

Exercise

    Within the root project folder, open the tsconfig.json file.

    View the JSON object that composes the TypeScript compiler configuration:

    {
        "compilerOptions": {
            "target": "es5",
            "module": "commonjs",
            "moduleResolution": "node",
            "sourceMap": true,
            "emitDecoratorMetadata": true,
            "experimentalDecorators": true,
            "removeComments": false,
            "noImplicitAny": true,
            "suppressImplicitAnyIndexErrors": true
        },
        "exclude": [
            "node_modules",
            "typings/main",
            "typings/main.d.ts"
        ]
    }

    Locate the target property and change it's value from es5 to es3:

    "target": "es3",

    Locate the module property and change it's value from commonjs to umd:

    "module": "umd",

    Locate the sourceMap property and change it's value from true to false:

    "sourceMap": false,

    Locate the removeComments property and change it's value from false to true:

    "removeComments": false,

    Your tsconfig.json file should now look like this:

    {
        "compilerOptions": {
            "target": "es3",
            "module": "umd",
            "moduleResolution": "node",
            "sourceMap": false,
            "emitDecoratorMetadata": true,
            "experimentalDecorators": true,
            "removeComments": true,
            "noImplicitAny": true,
            "suppressImplicitAnyIndexErrors": true
        },
        "exclude": [
            "node_modules",
            "typings/main",
            "typings/main.d.ts"
        ]
    }

Test Your Solution

    In Visual Studio Code, right click the Explorer and select the Open in Command Prompt option.

    Run the TypeScript compiler:

    tsc

    Close your open command prompt instance and Visual Studio Code. > Optional: You can look at the JavaScript files that are outputted as a result of the TypeScript compiler to see how they have changed.

Result: At the end of this guided exercise, you changed the target ECMAScript version and various other settings for the TypeScript compiler.




Compiler Command-Line Options

There are various options that you can use with the TypeScript compiler. This table does not list every option. You can go to the TypeScript website to see very compiler option.
Option 	Data Type 	Default Value 	Description
--declaration or -d 	boolean 	false 	Generates a .d.ts file with TypeScript declarations for your code. This is useful when you are distributing your JavaScript library.
--sourceMap 	boolean 	false 	Generates a .map source map file for IDEs with debuggers.
--target or -t 	string 	ES3 	Specifies the ECMAScript version for the generated JavaScript files.
--noImplicitAny 	boolean 	false 	Raises a compiler error if you try to use the implied any type in a TypeScript expression.
--module or -m 	string 	commonjs or ES6 	Specifies the module used by the compiler to generate code.
--watch or -w 			Runs the compiler in watch mode. Input files automatically trigger recompilation when they are changed.

    Source: http://www.typescriptlang.org/docs/handbook/compiler-options.html

Using Command-Line Options

Using the command-line options, you can perform more sophisticated actions such as generated declarations and source map files along with your JavaScript output:

demo.ts

class Greeter3 {
    public title : string;
    public echoTitle(prefix : string) : string {
        return prefix + ' ' + this.title;
    }
}

tsc demo.ts --sourceMap --declaration --target ES2015

Now you will generate demo.js, demo.js.map and demo.d.ts files using the compiler with the JavaScript file targeting the latest ECMAScript standard.

demo.js.map

{
    "version": 3,
    "file": "demo.js",
    "sourceRoot": "",
    "sources": ["demo.ts"],
    "names": [],
    "mappings": "AAAA;IAEW,SAAS,CAAC,MAAe;QAC5B,MAAM,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;IACrC,CAAC;AACL,CAAC;AAAA"
}

demo.d.ts

declare class Greeter3 {
    title: string;
    echoTitle(prefix: string): string;
}

demo.js

class Greeter3 {
    echoTitle(prefix) {
        return prefix + ' ' + this.title;
    }
}
//# sourceMappingURL=demo.js.map

tsconfig.json

Alternatively, you could use a tsconfig.json file to configure the compiler. This special file is used in various IDEs such as Visual Studio Code to configure the tsc compiler.

To create a new tsconfig.json file, you need to run the tsc compiler with the --init option:

tsc --init

Your new configuration file will come with recommended default settings:

{
    "compilerOptions": {
        "module": "commonjs",
        "target": "es5",
        "noImplicitAny": false,
        "sourceMap": false
    },
    "exclude": [
        "node_modules"
    ]
}

Most of the options are the same as using the compiler from the command line. There are a few exceptions. The exclude option here allows you to specify folders or files that you want ignored during compilation. This is very useful if you want to ignore certain folders. When working with NPM projects, you almost never want to compile the packages in the node_modules folder.

You can customize the tsconfig file to compile only a single ts file using the files property:

{
    "files": [
        "example.ts"
    ]
}

You can always customize this file to have the same behavior as running your compiler with the --declaration, --sourceMap and --target ES2015 options set earlier:

{
    "files": [
        "example.ts"
    ],
    "compilerOptions": {
        "target": "ES2015",
        "sourceMap": true,
        "declaration": true
    }
}

To compile using the tsconfig.json file, simply run the compiler again with no options specified:

tsc

If your configuration JSON file is not in the root of your project/folder, simply use the --project (or -p) compiler option to specify the location of the file:

tsc --project configuration/tsc.json

Compiling All Files in a Directory

If you would like to compile all TypeScript files in your current directory, you would need to simply modify the tsconfig.json file by removing the files property.

{
    "compilerOptions": {
        "target": "ES2015",
        "sourceMap": true,
        "declaration": true
    }
}





Module 4: TypeScript Features in Angular 2 > Modules > Modules

Modules

    Starting with the ECMAScript 2015, JavaScript has a concept of modules. TypeScript shares this concept.

    Modules are executed within their own scope, not in the global scope; this means that variables, functions, classes, etc. declared in a module are not visible outside the module unless they are explicitly exported using one of the export forms. Conversely, to consume a variable, function, class, interface, etc. exported from a different module, it has to be imported using one of the import forms.

    Modules are declarative; the relationships between modules are specified in terms of imports and exports at the file level.

    Modules import one another using a module loader. At runtime the module loader is responsible for locating and executing all dependencies of a module before executing it. Well-known modules loaders used in JavaScript are the CommonJS module loader for Node.js and require.js for Web applications.

    In TypeScript, just as in ECMAScript 2015, any file containing a top-level import or export is considered a module:

service.message.ts

export class MessageService {
    public getMessage() : string {
        return "Hello World";
    }
}

export interface IMessageService {
    getMessage() : string;
}

To use these types, you must use an Import statement in your TypeScript file. THe import statement list any members that you would like to import from the TypeScript file:

app.ts

import {MessageService, IMessageService} from "./service.message"

class Greeter {
    private _messageService : Messaging.IMessageService;
    constructor() {
        this._messageService = new Messaging.MessageService();
    }
    public alert() {
        let message : string = this._messageService.getMessage();
        alert(message);
    }
}

new Greeter().alert();

Alternatively, you can import all members from a file as a specific variable name:

app.ts

import * as MessageManager from "./service.message"

class Greeter {
    private _messageService : MessageManager.IMessageService;
    constructor() {
        this._messageService = new MessageManager.MessageService();
    }
    public alert() {
        let message : string = this._messageService.getMessage();
        alert(message);
    }
}

new Greeter().alert();

Modules in Angular

In an Angular application you will quickly notice that your components, services and other providers are surfaced as TypeScript modules. The top level members are using the export keyword and all of the other parts of a component are either decorators or import statements:

example.component.ts

import {Component} from '@angular/core';

@Component({
  selector: 'example-component',
  templateUrl: 'app/example.component.html',
  directives:  []
})
export class ExampleComponent { }

If you want to use the ExampleComponent above in another Angular component, you simply need to import the class member:

another.component.ts

import {ExampleComponent} from './example.component';


Module 4: TypeScript Features in Angular 2 > Modules > Hands-On: Using Modules in Angular

Hands-On: Using Modules in Angular

Objective: In this guided exercise, you will create a module in TypeScript and import it into another TypeScript file.

Pre-requisite: You need to have Visual Studio Code installed on your local machine (Windows, OSX or Linux) and Node Package Manager in order to complete this exercise.
Setup

    On your local machine, open Visual Studio Code.
    Go to the File menu and select the Open Folder option.
    Create a new folder for this exercise and select this folder in the dialog.

Bootstrapping Your Environment

    In Visual Studio Code, right click the Explorer and select the Open in Command Prompt option.
    Run the Angular generator using yeoman:

     yo edx-angular

    Close your command prompt.

Create a Module

    Within the app folder, create a file named sample.module.ts.

        The file should now be open in the editor

    Create a new class named NumberGetter with an export accessor:

     export class NumberGetter {
     }

    Add a public method named GetNumber that returns a value of type number to the NumberGetter class:

     export class NumberGetter {
         public GetNumber() : number {
         }
     }

    Add a TypeScript statement to return the hard-coded value 123 as the result of the GetNumber method:

     export class NumberGetter {
         public GetNumber() : number {
             return 123;
         }
     }

    Create a new class named StringGetter with an export accessor:

     export class StringGetter {
     }

    Add a public method named GetString that returns a value of type string to the StringGetter class:

     export class StringGetter {
         public GetString() : string {
         }
     }

    Add a TypeScript statement to return the hard-coded value "ABC" as the result of the GetString method:

     export class StringGetter {
         public GetString() : string {
             return "ABC";
         }
     }

Import a Module in AppComponent

    Within the app folder, open the app.component.ts file.
    Import all top-level members from the sample.module module using DataManager as the identifier:

     import * as DataManager from './sample.module';

    Locate the AppComponent class:

     export class AppComponent {
     }

    Add a public property named stringExample of type string to the AppComponent class:

     export class AppComponent {
         public stringExample : string;
     }

    Set the default value of the stringExample property to the result of creating a new instance of the StringGetter class using the DataManager identifier and invoking it's GetString method:

     export class AppComponent {
         public stringExample : string = new DataManager.StringGetter().GetString();
     }

    Add a public property named numberExample of type number to the AppComponent class:

     export class AppComponent {
         public stringExample : string = new DataManager.StringGetter().GetString();
         public numberExample : number;
     }

    Set the default value of the numberExample property to the result of creating a new instance of the NumberGetter class using the DataManager identifier and invoking it's GetNumber method:

     export class AppComponent {
         public stringExample : string = new DataManager.StringGetter().GetString();
         public numberExample : number = new DataManager.NumberGetter().GetNumber();
     }

    Within the app folder, open the app.component.html file.
    Add a new hr element below the existing h1 element in the HTML content:

     <h1>Demo App</h1>
     <hr />

    Add a new dl element below the hr element:

     <h1>Demo App</h1>
     <hr />
     <dl>
     </dl>

    Within the dl element, add a new dt element with the content String:

     <dl>
         <dt>String</dt>
     </dl>

    Within the dl element, add a new dd element with the content set to an Angular template expression that renders the value of the stringExample property:

     <dl>
         <dt>String</dt>
         <dd>{{stringExample}}</dd>
     </dl>

    Within the dl element, add a new dt element with the content Number:

     <dl>
         <dt>String</dt>
         <dd>{{stringExample}}</dd>
         <dt>Number</dt>
     </dl>

    Within the dl element, add a new dd element with the content set to an Angular template expression that renders the value of the numberExample property:

     <dl>
         <dt>String</dt>
         <dd>{{stringExample}}</dd>
         <dt>Number</dt>
         <dd>{{numberExample}}</dd>
     </dl>

Debugging Your Solution

    Click the Debug icon in the Workbench area (). Click the Launch button to start debugging your application ().

        The web page will now open in your default browser.

    View your web application.
    Observe the values rendered on the web page.
    Close your open browser and Visual Studio Code.

Result: At the end of this guided exercise, you created a custom module in TypeScript and used it directly in your AppComponent class.

