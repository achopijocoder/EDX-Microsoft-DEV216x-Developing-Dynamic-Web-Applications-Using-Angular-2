Module 2: Building Dynamic Applications using Angular 2 > Template Binding > Directives

Directives

    One of the defining features of a single page application is its manipulation of the DOM tree. Instead of serving a whole new page every time a user navigates, whole sections of the DOM appear and disappear according to the application state.

    There are three kinds of Angular directives: 1. Components 1. Attribute directives 1. Structural directives

Component Directive

    The Component is really a directive with a template. It's the most common of the three directives and we write lots of them as we build our application.

import {Component} from '@angular/core';

@Component({
  selector: 'demo-app',
  template: '<h1>{{title}}</h1>',
  directives:  []
})
export class AppComponent {
  public title : string
}

The Component Directive is used later in your application when you use your component within another component or within your index.html file:

<body>
  <demo-app>Loading...</demo-app>
</body>

Attribute Directive

An attribute directive only changes the behavior or appearance of an element. An attribute element modifies an existing element.

<div [ngStyle]="{'background-color': item.color}"></div>

Structural Directive

A structural directive shows or hides an element. A structural directive changes the Document Object Model (DOM) by adding or removing an element entirely.

<p *ngIf="isInStock">{{item.title}} Is In Stock!</p>

Module 2: Building Dynamic Applications using Angular 2 > Template Binding > Hands-On: Using Built-In Angular Directives

Hands-On: Using Built-In Angular Directives

Objective: In this guided exercise, you will use the built-in directives in Angular to change the appearance of your view.

Pre-requisite: You need to have Visual Studio Code installed on your local machine (Windows, OSX or Linux) and Node Package Manager in order to complete this exercise.
Setup

    On your local machine, open Visual Studio Code.
    Go to the File menu and select the Open Folder option.
    Create a new folder for this exercise and select this folder in the dialog.

Bootstrapping Your Environment

    In Visual Studio Code, right click the Explorer and select the Open in Command Prompt option.

    Run the Angular generator using yeoman:

    yo edx-angular

    Close your command prompt.

Add Properties to the AppComponent Class

    Within the app folder, open the app.component.ts file.

    Within the AppComponent class, add a new property of type boolean named showPanel with a value of true:

    export class AppComponent {
        public showPanel : boolean = true;
    }

    Within the AppComponent class, add a new method named getStyles:

    export class AppComponent {
        public showPanel : boolean = true;
        public getStyles() {

        }         
    }

    Update the getStyles method to return a JSON object with the following properties and values:
        font-weight: bold

        font-style: italic

        export class AppComponent {
        public showPanel : boolean = true;
        public getStyles() {
          return {
              'font-style': 'italic',
              'font-weight': 'bold'
          }
        }         
        }

    Within the AppComponent class, add a new method named getClasses:

    export class AppComponent {
        public showPanel : boolean = true;
        public getStyles() {
          return {
              'font-style': 'italic',
              'font-weight': 'bold'
          }
        }  
        public getClasses() {

        }         
    }

    Update the getClasses method to return a JSON object with the following properties and values:
        highlight: true

        strike: false

        export class AppComponent {
        public showPanel : boolean = true;
        public getStyles() {
          return {
              'font-style': 'italic',
              'font-weight': 'bold'
          }
        }  
        public getClasses() {
          return {
              'highlight': true,
              'strike': false
          }
        }         
        }

        Exercise
    Within the app folder, open the app.component.html file.

    Create a new style element of type text/css:

    <style type="text/css">
    </style>

    Within the style element, add a CSS class named highlight that sets the background-color to yellow:

    .highlight {
        background-color: yellow;
    }

    Within the style element, add a CSS class named strike that sets the text-decoration to line-through:

    .strike {
        text-decoration: line-through;
    }

    Create a new p element:

    <p>
    </p>

    Within the p element, create a new label element with the for attribute set to showPanelCheck and the content Show Panel?:

    <p>
        <label for="showPanelCheck">Show Panel?</label>
    </p>

    Within the p element, create a new input element with the id set to showPanelCheck and type set to checkbox:

    <p>
        <label for="showPanelCheck">Show Panel?</label>
        <input id="showPanelCheck" type="checkbox" />
    </p>

    Update the input element by setting it's model to the showPanel property of the component class:

    <p>
        <label for="showPanelCheck">Show Panel?</label>
        <input id="showPanelCheck" type="checkbox" [(ngModel)]="showPanel" />
    </p>

    Create a new p element with the content Panel is Shown:

    <p>
        Panel is Shown
    </p>

    Update the p element by using the ngIf directive and binding it to the showPanel property of the component class:

    <p *ngIf="showPanel">
        Panel is Shown
    </p>

    Create a new p element with the content Custom Classes:

    <p>
        Custom Classes
    </p>

    Update the p element by using the ngClass directive and binding it to the getClasses method of the component class:

    <p [ngClass]="getClasses()">
        Custom Classes
    </p>

    Create a new p element with the content Panel is Shown:

    <p>
        Custom Styles
    </p>

    Update the p element by using the ngStyle directive and binding it to the getStyles property of the component class:

    <p [ngStyle]="getStyles()">
        Custom Styles
    </p>

Debugging Your Solution

    Click the Debug icon in the Workbench area (). Click the Launch button to start debugging your application (). > The web page will now open in your default browser.
    View your web application.
    Observe the appearance of each element.
    Click the checkbox and observe the changes to the Panel is Shown text.

    Close your open browser and Visual Studio Code.

Result: At the end of this guided exercise, you have used some of the built-in directives in Angular to modify your view.


Module 2: Building Dynamic Applications using Angular 2 > Template Binding > Property Binding

Property Binding

    When developing data entry forms, we often want to both display a data property and update that property when the user makes changes. The [(ngModel)] two-way data binding syntax makes that easy. Here's an example:

    <input [(ngModel)]="currentHero.firstName">

Why Bind to Properties?

Using the ngModel directive, we can create a two-way binding relationship to properties of our component.

For example, let's consider this very basic component:

@Component({
  selector: 'data-entry',
  template: 'app/data-entry.component.html'
})
export class DataEntryComponent {
  public name : string = "John Doe";
}

There is a single string property that defaults to the value "John Doe". We can bind this property to our HTML view using this syntax:

<input [(ngModel)]="name" placeholder="Enter Your Name">

Now, when the user changes this property in their browser, it is automatically updated in our Component's logic. This inverse is also true. If we write code to change this property, the change will be reflected to the user in their browser. This is the most essential component of two-way data binding.
