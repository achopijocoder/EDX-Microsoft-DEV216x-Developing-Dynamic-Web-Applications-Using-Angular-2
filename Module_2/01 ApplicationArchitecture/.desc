Module 2: Building Dynamic Applications using Angular 2 > Application Architecture > Modules

Modules

Angular applications can be composed of one or more modules.

A module is simply a collection of different components including:

    Components: Components are the basic building blocks of Angular applications and modules. They are a simple pairing of a TypeScript class and an Angular template.
    Directives: Directives are either new HTML elements (structural) or new attributes on existing elements (attribute) that allow you to add custom markup to your templates.
    Services: Services are helper classes that can be used throughout your application.

    Note: When thinking about a module in TypeScript, a module is really a file. When importing a file, you can import all of the top-level classes within the file. These classes could be services, directives or components. We will talk more about these concepts in the TypeScript module. 

Other components that can be located within a module include functions and values.

Module
Designing Modules

When designing a module, it is important to make sure that the module is cohesive and serves a single purpose. If a module serves too many purposes, it is better to split the separate functionality into separate modules.

Once you have designed all of the components of your module, you typically create a TypeScript class that serves as the primary class of your module. This class is exported meaning that it is shared. Within this class, you can include other classes representing services, directives or components.

Export Class
Library Modules

Modules can be nested so that a single top-level module can be distributed and include many other useful modules.

A library module is the name typically associated with a module that is composed of other modules. Many of the modules that ship with Angular are library modules. When you create your first Angular application, you will import the angular2/core module which is composed of other modules necessary to use in your application.

Module 2: Building Dynamic Applications using Angular 2 > Application Architecture > Components

Components

The most common building block in an Angular application is a component. A component creates a relationship between Angular logic and an template. This template is typically referred to as the view.

Component

In simplest terms, a component is a TypeScript class and the HTML markup that is controlled by that class. Within the class, we write application logic that controls various values and those values can optionally be written to the view. This is referred to as property binding. If we change a property of the class in the component, the Angular architecture understands this change and updates the HTML markup (view) in response to this change.

We also can create methods that are invoked in response to events that happen at the view. If a user clicks a button, we can then invoke a method in the class within the component. This behavior is referred to as event binding.
Enhancing Components

Within a component, you can easily use other parts of your module or other modules.

Components can leverage services in the TypeScript class through a pattern called dependency injection. This pattern and the implementation in Angular will be discussed in a later module.

Components can also use custom directives in the template.

Extending Components

Components can also use other components. If you have a to-do list application, you could easily break your application down into multiple components:

    Component to manage and display the list of to-do items
    Component to manage a form to add items to the list of to-do items
    Overall component that includes the two components mentioned above

This modular approach makes applications a lot easier to test and can also help you in reusing components throughout your application.

Module 2: Building Dynamic Applications using Angular 2 > Application Architecture > Hands-On: Creating Modules

Hands-On: Creating Modules

Objective: In this guided exercise, you will create and consume a module in your Angular application.

Pre-requisite: You need to have Visual Studio Code installed on your local machine (Windows, OSX or Linux) and Node Package Manager in order to complete this exercise.
Setup

    On your local machine, open Visual Studio Code.
    Go to the File menu and select the Open Folder option.
    Create a new folder for this exercise and select this folder in the dialog.

Bootstrapping Your Environment

    In Visual Studio Code, right click the Explorer and select the Open in Command Prompt option.

    Run the Angular generator using yeoman:

    yo edx-angular

    Close your command prompt.

Create a Module

    Within the app folder, create a file named demo.module.ts. > The file should now be open in the editor

    Within the new file, add a TypeScript class named TextGenerator with the export accessor:

    export class TextGenerator {    
    }

    Add a method within the TextGenerator class named GetText and with a return type of string:

    public GetText() : string {    
    }

    Add the following code within the GetText method to return a static string value:

    return "Hello World";

    Your demo.module.ts file should now look like this:

    export class TextGenerator {
        public GetText() : string {
            return "Hello World";
        }
    }

Use the Module in AppComponent

    Within the app folder, open the app.component.ts file.

    Add an import statement to the top of your file that imports the top-level TextGenerator class from the demo.module module:

    import {TextGenerator} from './demo.module';

    Within the AppComponent class, add a new property of type string named message:

    export class AppComponent {
        public message : string;
    }

    Within the AppComponent class, add a new constructor:

    export class AppComponent {
        public message : string;
        constructor() {

        }
    }

    Within the constructor, create a new instance of the TextGenerator class:

    constructor() {
        let generator = new TextGenerator();
    }

    Within the constructor, assign the result of a method call to the generator's GetText method to the message property:

    this.message = generator.GetText();

    Within the app folder, open the app.component.html file.

    Add a new line of HTML to render the value of the message property:

    <h1>Demo App</h1>
    <p>{{message}}</p>

Debugging Your Solution

    Locate and select the Debug: Start Debugging using the Command Palette. > The web page will now open in your default browser.
    View your web application.
    Observe the message printed under the Demo App header.

    Close your open browser and Visual Studio Code.

Result: At the end of this guided exercise, you created a module and consumed it within another TypeScript file.

Module 2: Building Dynamic Applications using Angular 2 > Application Architecture > Angular Modules


Angular Modules

        @angular/core - Critical runtime parts of the framework needed by every application. Includes all metadata decorators, Component, Directive, dependency injection, and the component lifecycle hooks.
        @angular/common - The commonly needed services, pipes and directives provided by the Angular team.
        @angular/compiler - Angular's Template Compiler. It understand templates and can convert them to code that makes the app run and render. Developers typically don’t interact with the compiler directly. They use it indirectly via platform-browser-dynamic or the offline template compiler.
        @angular/platform-browser - Everything DOM and browser related, especially the pieces that help render into DOM. This package also includes the bootstrapStatic method for bootstrapping applications for production builds that pre-compile templates offline.
        @angular/platform-browser-dynamic - Providers and a bootstrap method for applications that compile templates on the client. don’t use offline compilation. We use this package for boostrapping during development and for boostrapping plunker samples
        @angular/http - Angular's http client
        @angular/router - Component router.


Module 2: Building Dynamic Applications using Angular 2 > Templates > Interpolation

Interpolation

All Angular templates start as basic HTML. Our earlier applications had templates that were simply HTML:

<h1>Demo App</h1>

Almost all HTML is valid in an Angular template.

    There are a couple of exceptions. For example, the <script> element is forbidden in Angular templates.

You may have seen curly braces in some of our demos. These curly braces are interpolation and allow us to weave HTML markup and dynamic data:

<p>City of origin: {{person.City}}</p>

    We use interpolation to weave calculated strings into the text between HTML element tags and within attribute assignments.

    <h3>
    {{title}}
    <img src="{{heroImageUrl}}" style="height:30px">
    </h3>

    The material between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property. In this example, Angular evaluates the title and heroImageUrl properties and "fills in the blanks", displaying first a bold application title and then a heroic image.

    Module 2: Building Dynamic Applications using Angular 2 > Templates > Hands-On: Using the Angular Template Syntax

Hands-On: Using the Angular Template Syntax

Objective: In this guided exercise, you will use the Angular template syntax to bind view content to properties of your component class.

Pre-requisite: You need to have Visual Studio Code installed on your local machine (Windows, OSX or Linux) and Node Package Manager in order to complete this exercise.
Setup

    On your local machine, open Visual Studio Code.
    Go to the File menu and select the Open Folder option.
    Create a new folder for this exercise and select this folder in the dialog.

Bootstrapping Your Environment

    In Visual Studio Code, right click the Explorer and select the Open in Command Prompt option.

    Run the Angular generator using yeoman:

    yo edx-angular

    Close your command prompt.

Add Properties to the AppComponent Class

    Within the app folder, open the app.component.ts file.

    Within the AppComponent class, add a new property of type number named count with a value of 2:

    export class AppComponent {
        public count : number = 2;
    }

    Within the AppComponent class, add a new property of type boolean named indicator with a value of true:

    export class AppComponent {
        public count : number = 2;
        public indicator : boolean = true;
    }

    Within the AppComponent class, add a new property of type string[] named messages with the following values:
        Alpha
        Bravo

        Charlie

        export class AppComponent {
        public count : number = 2;
        public indicator : boolean = true;
        public messages : string[] = ['Alpha', 'Bravo', 'Charlie'];
        }

    Within the AppComponent class, add a new property of type string named title with a value of Template Binding:

    export class AppComponent {
        public count : number = 2;
        public indicator : boolean = true;
        public messages : string[] = ['Alpha', 'Bravo', 'Charlie'];
        public title : string = 'Template Binding';
    }

Use the Angular Template Syntax

    Within the app folder, open the app.component.html file.
    Delete the existing HTML content.

    Add a new H2 element to the HTML content:

    <h2></h2>

    Within the H2 element, add a binding to the title property of the component class:

    <h2>{{title}}</h2>

    Add a new form element to the HTML content:

    <h2>{{title}}</h2>
    <form>
    </form>

    Within the form element, add a new fieldset element:

    <form>
        <fieldset>
        </fieldset>
    </form>

    Within the fieldset element, add a new legend element with the content Indicator:

    <fieldset>
        <legend>Indicator</legend>
    </fieldset>

    Within the fieldset element, add a new input element with the type checkbox:

    <fieldset>
        <legend>Indicator</legend>
        <input type="checkbox" />
    </fieldset>

    Update the checkbox input element to bind it's model to the indicator property:

    <input type="checkbox" [(ngModel)]="indicator" />

    Within the form element, add another new fieldset element:

    <fieldset>
    </fieldset>

    Within the fieldset element, add a new legend element with the content Count:

    <fieldset>
        <legend>Count</legend>
    </fieldset>

    Within the fieldset element, add a new input element with the type range:

    <fieldset>
        <legend>Count</legend>
        <input type="range" />
    </fieldset>

    Update the range input element by setting it's minimum to 0, maximum to 5 and step to 1:

    <input type="range" min="0" max="5" step="1" />

    Update the range input element to bind it's model to the count property:

    <input type="range" min="0" max="5" step="1" [(ngModel)]="count" />

    Within the form element, add another new fieldset element:

    <fieldset>
    </fieldset>

    Within the fieldset element, add a new legend element with the content Messages:

    <fieldset>
        <legend>Messages</legend>
    </fieldset>

    Within the fieldset element, add a new ol element:

    <fieldset>
        <legend>Messages</legend>
        <ol>
        </ol>
    </fieldset>

    Within the ol element, add a li element:

    <fieldset>
        <legend>Messages</legend>
        <ol>
              <li>
              </li>
        </ol>
    </fieldset>

    Update the li element to use the ngFor looping syntax to create a for loop over the messages property using a message variable for each item:

    <li *ngFor="let message of messages">
    </li>

    Update the content of the li element by binding it to the message variable within the loop:

    <li *ngFor="let message of messages">
        {{message}}
    </li>

    Within the form element, add another new fieldset element:

    <fieldset>
    </fieldset>

    Within the fieldset element, add a new legend element with the content Results:

    <fieldset>
        <legend>Results</legend>
    </fieldset>

    Copy and paste the following HTML within the new fieldset element:

    <ul>
        <li><strong>Indicator:</strong> {{indicator}}</li>
        <li><strong>Count:</strong> {{count}}</li>
        <li><strong>Title:</strong> {{title}}</li>
        <li><strong>Messages:</strong> {{messages}}</li>
    </ul>

        This content will render the current values of each property in your component class so you can see how the form changes these values.

    Your HTML content in app.component.html should now look like this:

    <h2>{{title}}</h2>
    <form>
        <fieldset>
            <legend>Indicator</legend>
            <input type="checkbox" [(ngModel)]="indicator" />
        </fieldset>
        <fieldset>
            <legend>Count</legend>
            <input type="range" min="0" max="5" step="1" [(ngModel)]="count" />
        </fieldset>
        <fieldset>
            <legend>Messages</legend>
            <ol>
                <li *ngFor="let message of messages">
                    {{message}}
                </li>
            </ol>
        </fieldset>
        <fieldset>
            <legend>Results</legend>
            <ul>
                <li><strong>Indicator:</strong> {{indicator}}</li>
                <li><strong>Count:</strong> {{count}}</li>
                <li><strong>Title:</strong> {{title}}</li>
                <li><strong>Messages:</strong> {{messages}}</li>
            </ul>
        </fieldset>
    </form>

Debugging Your Solution

    Click the Debug icon in the Workbench area (). Click the Launch button to start debugging your application (). > The web page will now open in your default browser.
    View your web application.
    Observe the values in the Results section change as you modify the inputs.

    Close your open browser and Visual Studio Code.

Result: At the end of this guided exercise, you used the template syntax in Angular to create a HTML view of the properties in your component class.




